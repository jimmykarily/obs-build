
#################################################################
#
# Docker specific functions.
#
# Author: TODO
#
################################################################
#
# Copyright (c) 2017 SUSE Linux Products GmbH
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 or 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program (see the file COPYING); if not, write to the
# Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA
#
################################################################

recipe_setup_docker() {
  TOPDIR="/docker_sources"
  mkdir -p "$BUILD_ROOT$TOPDIR/SOURCES"
  # Also copy the repos dir
	cp -rp "$MYSRCDIR"/* $BUILD_ROOT$TOPDIR/SOURCES/
}

recipe_prepare_docker() {
    :
}

# Variables:
# $BUILD_ROOT is the chroot
# $TOPDIR/SOURCES includes the docker sources
# $TOPDIR/$DOCKERIMAGE_ROOT where docker will be called
# $RECIPEFILE the name of the Dockerfile

recipe_build_docker() {
    # Start docker daemon. We should have docker as a dependency in the project.
    echo "Starting docker service"
    systemctl start docker

    # Import the base image to docker.
    # TODO Where should we find this tarball?
    # TODO The image should be imported and tagged with the tag used in the
    # Dockerfile.
    echo "Importing base image to docker"
    docker import my_image.tgz

    # TODO Start the local zypper repository
    # TODO Inject the OBS_REPOSITORY_URL in the Dockerfile as described here:
    # https://github.com/SUSE/cloudfoundry/blob/NativeDockerInOBS_research_results/NativeDockerInOBS.md

    # This is where the downloaded packages live
    REPOPATH=$BUILD_ROOT$TOPDIR/SOURCES/$REPODIR
    # Prepare the zypper repository
    # TODO: Handle other distribution repositories as well (deb, arch etc)
    createrepo  $REPOPATH
    pushd $REPOPATH
    # TODO How does Python end up here? Maybe we need it to be a "default"
    # dependency for Dockerfiles or something like that.
    python -m SimpleHTTPServer 8080 &
    HTTP_SERVER_PID=$!
    #echo "The PID is: "$HTTP_SERVER_PID
    popd

    # Build the repository url
    default_interface=$(ip route list | grep default | cut -d' ' -f5)
    interface_ip=$(ip addr show $default_interface | grep "inet " | tr -s " " | cut -d' ' -f3 | cut -d'/' -f1)
    REPO_URL=http://$interface_ip:8080/

    echo "Building image"
    docker build -t obs_image --build-arg obs_repository_url=$REPO_URL $BUILD_ROOT$TOPDIR/SOURCES/

    kill $HTTP_SERVER_PID

    BUILD_SUCCEEDED=true
}

recipe_resultdirs_docker() {
    :
}

# Local Variables:
# mode: Shell-script
# End:
